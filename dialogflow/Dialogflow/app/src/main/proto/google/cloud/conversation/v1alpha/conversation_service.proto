// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.conversation.v1alpha;

import "google/api/annotations.proto";
import "google/cloud/conversation/v1alpha/context.proto";
import "google/cloud/conversation/v1alpha/detect_intent.proto";
import "google/cloud/conversation/v1alpha/entity_type.proto";
import "google/cloud/conversation/v1alpha/intent.proto";
import "google/cloud/conversation/v1alpha/session_entity_type.proto";
import "google/protobuf/empty.proto";

option cc_enable_arenas = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/conversation/v1alpha;conversation";
option java_multiple_files = true;
option java_outer_classname = "ConversationServiceProto";
option java_package = "com.google.cloud.conversation.v1alpha";

// # This service defines the Cloud Conversation Engine API.
//
// Conversation API
service ConversationService {
  // Processes a natural language query and returns structured, actionable data
  // as a result. This method is not idempotent, because it may cause contexts
  // and session entity types to be updated, which in turn might affect
  // results of future queries.
  rpc DetectIntent(DetectIntentRequest) returns (DetectIntentResponse) {
    option (google.api.http) = {
      post: "/v1alpha/{session=projects/*/agents/*/sessions/*}:detectIntent"
      body: "*"
    };
  }

  // Processes a natural language query in audio format in a streaming fashion
  // and returns structured, actionable data as a result. This method is only
  // available via the gRPC API (not REST).
  rpc StreamingDetectIntent(stream StreamingDetectIntentRequest)
      returns (stream StreamingDetectIntentResponse);

  // Lists all entity types in the specified agent.
  rpc ListEntityTypes(ListEntityTypesRequest)
      returns (ListEntityTypesResponse) {
    option (google.api.http) = {
      get: "/v1alpha/{parent=projects/*/agents/*}/entityTypes"
    };
  }

  // Retrieves the specified entity type.
  rpc GetEntityType(GetEntityTypeRequest) returns (EntityType) {
    option (google.api.http) = {
      get: "/v1alpha/{name=projects/*/agents/*/entityTypes/*}"
    };
  }

  // Creates a new entity type in the specified agent.
  rpc CreateEntityType(CreateEntityTypeRequest) returns (EntityType) {
    option (google.api.http) = {
      post: "/v1alpha/{parent=projects/*/agents/*}/entityTypes"
      body: "entity_type"
    };
  }

  // Updates the specified entity type.
  rpc UpdateEntityType(UpdateEntityTypeRequest) returns (EntityType) {
    option (google.api.http) = {
      put: "/v1alpha/{entity_type.name=projects/*/agents/*/entityTypes/*}"
      body: "entity_type"
    };
  }

  // Deletes the specified entity type.
  rpc DeleteEntityType(DeleteEntityTypeRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha/{name=projects/*/agents/*/entityTypes/*}"
    };
  }

  // Updates or creates multiple entity types in the specified agent.
  rpc BatchUpdateEntityTypes(BatchUpdateEntityTypesRequest)
      returns (BatchUpdateEntityTypesResponse) {
    option (google.api.http) = {
      post: "/v1alpha/{parent=projects/*/agents/*}/entityTypes:batchUpdate"
      body: "*"
    };
  }

  // Creates multiple new entities in the specified entity type (extends the
  // existing collection of entries).
  rpc BatchCreateEntities(BatchCreateEntitiesRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post:
          "/v1alpha/{parent=projects/*/agents/*/entityTypes/*}/"
          "entities:batchCreate"
      body: "*"
    };
  }

  // Updates entities in the specified entity type (replaces the existing
  // collection of entries).
  rpc BatchUpdateEntities(BatchUpdateEntitiesRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post:
          "/v1alpha/{parent=projects/*/agents/*/entityTypes/*}/"
          "entities:batchUpdate"
      body: "*"
    };
  }

  // Deletes entities in the specified entity type.
  rpc BatchDeleteEntities(BatchDeleteEntitiesRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post:
          "/v1alpha/{parent=projects/*/agents/*/entityTypes/*}/"
          "entities:batchDelete"
      body: "*"
    };
  }

  // Lists all intents in the specified agent.
  rpc ListIntents(ListIntentsRequest) returns (ListIntentsResponse) {
    option (google.api.http) = {
      get: "/v1alpha/{parent=projects/*/agents/*}/intents"
    };
  }

  // Retrieves the specified intent.
  rpc GetIntent(GetIntentRequest) returns (Intent) {
    option (google.api.http) = {
      get: "/v1alpha/{name=projects/*/agents/*/intents/*}"
    };
  }

  // Creates a new intent in the specified agent.
  rpc CreateIntent(CreateIntentRequest) returns (Intent) {
    option (google.api.http) = {
      post: "/v1alpha/{parent=projects/*/agents/*}/intents"
      body: "intent"
    };
  }

  // Updates the specified intent.
  rpc UpdateIntent(UpdateIntentRequest) returns (Intent) {
    option (google.api.http) = {
      put: "/v1alpha/{intent.name=projects/*/agents/*/intents/*}"
      body: "intent"
    };
  }

  // Deletes the specified intent.
  rpc DeleteIntent(DeleteIntentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha/{name=projects/*/agents/*/intents/*}"
    };
  }

  // Retrieves the specified session entity type.
  rpc GetSessionEntityType(GetSessionEntityTypeRequest)
      returns (SessionEntityType) {
    option (google.api.http) = {
      get: "/v1alpha/{name=projects/*/agents/*/sessions/*/entityTypes/*}"
    };
  }

  // Creates a new session entity type in the specified session.
  rpc CreateSessionEntityType(CreateSessionEntityTypeRequest)
      returns (SessionEntityType) {
    option (google.api.http) = {
      post: "/v1alpha/{parent=projects/*/agents/*/sessions/*}/entityTypes"
      body: "session_entity_type"
    };
  }

  // Updates the specified session entity type.
  rpc UpdateSessionEntityType(UpdateSessionEntityTypeRequest)
      returns (SessionEntityType) {
    option (google.api.http) = {
      put: "/v1alpha/{session_entity_type.name=projects/*/agents/*/sessions/*/"
           "entityTypes/*}"
      body: "session_entity_type"
    };
  }

  // Deletes the specified session entity type.
  rpc DeleteSessionEntityType(DeleteSessionEntityTypeRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha/{name=projects/*/agents/*/sessions/*/entityTypes/*}"
    };
  }

  // Lists contexts which are active in the specified session.
  rpc ListContexts(ListContextsRequest) returns (ListContextsResponse) {
    option (google.api.http) = {
      get: "/v1alpha/{parent=projects/*/agents/*/sessions/*}/contexts"
    };
  }

  // Retrieves the specified context.
  rpc GetContext(GetContextRequest) returns (Context) {
    option (google.api.http) = {
      get: "/v1alpha/{name=projects/*/agents/*/sessions/*/contexts/*}"
    };
  }

  // Creates a new context in the specified session.
  rpc CreateContext(CreateContextRequest) returns (Context) {
    option (google.api.http) = {
      post: "/v1alpha/{parent=projects/*/agents/*/sessions/*}/contexts"
      body: "context"
    };
  }

  // Updates the specified context.
  rpc UpdateContext(UpdateContextRequest) returns (Context) {
    option (google.api.http) = {
      put: "/v1alpha/{context.name=projects/*/agents/*/sessions/*/contexts/*}"
      body: "context"
    };
  }

  // Deletes the specified context.
  rpc DeleteContext(DeleteContextRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha/{name=projects/*/agents/*/sessions/*/contexts/*}"
    };
  }

  // Creates multiple new contexts in the specified session.
  rpc BatchCreateContexts(BatchCreateContextsRequest)
      returns (BatchCreateContextsResponse) {
    option (google.api.http) = {
      post:
          "/v1alpha/{parent=projects/*/agents/*/sessions/*}/"
          "contexts:batchCreate"
      body: "*"
    };
  }

  // Deletes all active context in the specified session.
  rpc DeleteAllContexts(DeleteAllContextsRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha/{parent=projects/*/agents/*/sessions/*}/contexts"
    };
  }
}

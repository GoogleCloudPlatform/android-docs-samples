// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.conversation.v1alpha;

import "google/api/annotations.proto";

option cc_enable_arenas = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/conversation/v1alpha;conversation";
option java_multiple_files = true;
option java_outer_classname = "EntityProto";
option java_package = "com.google.cloud.conversation.v1alpha";

// Represents an entity type.
// Entity types represent concepts and serve as a tool for extracting parameter
// values from natural language queries.
message EntityType {
  // *Optional* Represents an entity.
  message Entity {
    // *Required*
    // For `KIND_MAP` entity types:
    //   A canonical name to be used in place of synonyms.
    // For `KIND_LIST` entity types:
    //   A string that can contain references to other entity types (with or
    //   without aliases).
    string value = 1;

    // *Required* A collection of synonyms. For `KIND_LIST` entity types this
    // must contain exactly one synonym equal to `value`.
    repeated string synonyms = 2;
  }

  // Represents kinds of entities.
  enum Kind {
    // Not specified. This value should be never used.
    KIND_UNSPECIFIED = 0;

    // Map entity types allow mapping of a group of synonyms to a canonical
    // value.
    KIND_MAP = 1;

    // List entity types contain a set of entries that do not map to canonical
    // values.
    KIND_LIST = 2;
  }

  // Represents different entity type expansion modes. Automated expansion
  // allows an agent to recognize values that have not been explicitly listed in
  // the entity (for example, new kinds of shopping list items).
  enum AutoExpansionMode {
    // Auto expansion is turned off for the entity.
    AUTO_EXPANSION_MODE_UNSPECIFIED = 0;

    // Allows an agent to recognize values that have not been explicitly
    // listed in the entity.
    AUTO_EXPANSION_MODE_DEFAULT = 1;
  }

  // *Required* The unique identifier of the entity type.
  // Format: `projects/<Project ID>/agents/<Agent
  // ID>/entityTypes/<Entity Type ID>`.
  string name = 1;

  // *Required* The name of the entity.
  string display_name = 2;

  // *Required* Indicates the kind of entity type.
  Kind kind = 3;

  // *Optional* Indicates whether the entity type can be automatically
  // expanded.
  AutoExpansionMode auto_expansion_mode = 4;

  // *Optional* The collection of entities associated with the entity type.
  repeated Entity entities = 6;
}

// The request to list all entity types in the specified agent.
message ListEntityTypesRequest {
  // *Required* The name of the agent to list entity types from.
  // Format: `projects/<Project ID>/agents/<Agent ID>`.
  string parent = 1;
}

// The message returned from the ListEntityTypes method.
message ListEntityTypesResponse {
  // The list of entity types in the specified agent.
  // Only name and display_name will be returned.
  repeated EntityType entity_types = 1;
}

// The request to retrieve the specified entity type.
message GetEntityTypeRequest {
  // *Required* The name of the entity type to retrieve.
  // Format: `projects/<Project ID>/agents/<Agent
  // ID>/entitityTypes/<Entity Type ID>`.
  string name = 1;
}

// The request to create a new entity type in the specified agent.
message CreateEntityTypeRequest {
  // *Required* The name of the agent to create a new entity type in.
  // Format: `projects/<Project ID>/agents/<Agent ID>`.
  string parent = 1;

  // *Required* The entity resource to create. `EntityType.name` must be
  // empty.
  EntityType entity_type = 2;
}

// The request to update the specified entity type.
message UpdateEntityTypeRequest {
  // *Required* The entity type to update.
  EntityType entity_type = 1;
}

// The request to update the specified entity type.
message DeleteEntityTypeRequest {
  // *Required* The name of the entity type to delete.
  // Format: `projects/<Project ID>/agents/<Agent
  // ID>/entityTypes/<Entity Type ID>`.
  string name = 1;
}

// The request to update or create multiple entity types in the specified agent.
message BatchUpdateEntityTypesRequest {
  // *Required* The name of the agent to update or create entity types in.
  // Format: `projects/<Project ID>/agents/<Agent ID>`.
  string parent = 1;

  // *Required* The collection of entity types to update or create.
  repeated EntityType entity_types = 2;
}

// The message returned from the BatchUpdateEntityTypes method.
message BatchUpdateEntityTypesResponse {
  // The collection of updated or created entity types.
  repeated EntityType entity_types = 1;
}

// The request to create multiple new entities for the specified entity type.
message BatchCreateEntitiesRequest {
  // *Required* The name of the entity type to create entities in.
  // Format: `projects/<Project ID>/agents/<Agent
  // ID>/entityTypes/<Entity Type ID>`.
  string parent = 1;

  // *Required* The collection of entities to create.
  repeated EntityType.Entity entities = 2;
}

// The request to update entities for the specified entity type. Existing
// entities are replaced.
message BatchUpdateEntitiesRequest {
  // *Required* The name of the entity type to update the entities in.
  // Format: `projects/<Project ID>/agents/<Agent
  // ID>/entityTypes/<Entity Type ID>`.
  string parent = 1;

  // *Required* The collection of new entities to replace the existing entities.
  repeated EntityType.Entity entities = 2;
}

// The request to delete all entities from the specified entity type.
message BatchDeleteEntitiesRequest {
  // *Required* The name of the entity type to delete entries for.
  // Format: `projects/<Project ID>/agents/<Agent
  // ID>/entityTypes/<Entity Type ID>`.
  string parent = 1;

  // *Required* The collection of entities to delete. Only the canonical `value`
  // must be filled in.
  repeated EntityType.Entity entities = 2;
}

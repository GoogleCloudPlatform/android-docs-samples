// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.conversation.v1alpha;

import "google/api/annotations.proto";
import "google/cloud/conversation/v1alpha/entity_type.proto";

option cc_enable_arenas = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/conversation/v1alpha;conversation";
option java_multiple_files = true;
option java_outer_classname = "UserUserEntityProto";
option java_package = "com.google.cloud.conversation.v1alpha";

// Extends or replaces a developer entity type at the
// user session level.
message SessionEntityType {
  // The types of modifications for a session entity type.
  enum EntityOverrideMode {
    // Not specified. This value should be never used.
    ENTITY_OVERRIDE_MODE_UNSPECIFIED = 0;

    // The collection of session entities overrides the collection of entities
    // in the corresponding developer entity type.
    ENTITY_OVERRIDE_MODE_OVERRIDE = 1;

    // The collection of session entities extends the collection of entities in
    // the corresponding developer entity type. Calls to
    // `CreateSessionEntityType`, `UpdateSessionEntityType` and
    // `GetSessionEntityType` return the full collection of entities from the
    // developer entity type and the session entity type.
    ENTITY_OVERRIDE_MODE_SUPPLEMENT = 2;
  }

  // *Required* The unique identifier of this session entity type.
  // Format: `projects/<Project ID>/agents/<Agent ID>/sessions/<Session
  // ID>/entityTypes/<Entity Type ID>`.
  string name = 1;

  // *Required* Indicates whether the additional data should override or
  // supplement the developer entity type definition.
  EntityOverrideMode entity_override_mode = 2;

  // *Required* The collection of entities associated with this session entity
  // type.
  repeated EntityType.Entity entities = 3;
}

// The request to retrieve the specified session entity type.
message GetSessionEntityTypeRequest {
  // *Required* The name of the session entity type to retrieve.
  // Format: `projects/<Project ID>/agents/<Agent ID>/sessions/<Session
  // ID>/entityTypes/<Entity Type ID>`.
  string name = 1;
}

// The request to create a new entity type in the specified session.
message CreateSessionEntityTypeRequest {
  // *Required* The name of the session to create a new entity type in.
  // Format: `projects/<Project ID>/agents/<Agent ID>/sessions/<Session ID>`.
  string parent = 1;

  // *Required* The session entity type to create.
  SessionEntityType session_entity_type = 2;
}

// The request to update the specified session entity type.
message UpdateSessionEntityTypeRequest {
  // *Required* The session entity type to update.
  SessionEntityType session_entity_type = 1;
}

// The request to delete the specified session entity type.
message DeleteSessionEntityTypeRequest {
  // *Required* The name of the session entity type to delete.
  // Format: `projects/<Project ID>/agents/<Agent ID>/sessions/<Session
  // ID>/entityTypes/<Entity Type ID>`.
  string name = 1;
}

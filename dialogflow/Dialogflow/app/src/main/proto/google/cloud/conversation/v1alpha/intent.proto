// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.conversation.v1alpha;

import "google/api/annotations.proto";
import "google/cloud/conversation/v1alpha/context.proto";
import "google/protobuf/struct.proto";

option cc_enable_arenas = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/conversation/v1alpha;conversation";
option java_multiple_files = true;
option java_outer_classname = "IntentProto";
option java_package = "com.google.cloud.conversation.v1alpha";

// Represents user intent.
// Intents convert a number of user expressions or patterns into an action. An
// action is an extraction of a user command or sentence semantics.
message Intent {
  // Represents an example or template that the agent is trained on.
  message TrainingPhrase {
    // Represents a part of a training phrase.
    message Part {
      // *Required* The text corresponding to the example or template,
      // if there are no annotations. For
      // annotated examples, it is the text for one of the example's parts.
      string text = 1;

      // *Optional* The entity type name prefixed with `@`. This field is
      // required for the annotated part of the text and applies only to
      // examples.
      string entity_type = 2;

      // *Optional* The parameter name for the value extracted from the
      // annotated part of the example.
      string alias = 3;

      // *Optional* Indicates whether the text was manually annotated by the
      // developer.
      bool user_defined = 4;
    }

    // Represents different types of training phrases.
    enum Type {
      // Not specified. This value should be never used.
      TYPE_UNSPECIFIED = 0;

      // Examples do not contain @-prefixed entity type names, but example parts
      // can be annotated with entity types.
      TYPE_EXAMPLE = 1;

      // Templates are not annotated with entity types, but they can contain
      // @-prefixed entity type names as substrings.
      TYPE_TEMPLATE = 2;
    }

    // *Required* The unique identifier of this training phrase.
    string name = 1;

    // *Required* The type of the training phrase.
    Type type = 2;

    // *Required* The collection of training phrase parts (can be annotated).
    // Fields: `entity_type`, `alias` and `user_defined` should be populated
    // only for the annotated parts of the training phrase.
    repeated Part parts = 3;

    // *Optional* Indicates how many times this example or template was added to
    // the intent. Each time a developer adds an existing sample by editing an
    // intent or training, this counter is increased.
    int32 times_added_count = 4;
  }

  // Represents the result of matching an intent.
  message Result {
    // Represents intent parameters.
    message Parameter {
      // *Required* The name of the parameter.
      string display_name = 1;

      // *Optional* The definition of the parameter value. It can be:
      // - a constant string,
      // - a parameter value defined as `$parameter_name`,
      // - an original parameter value defined as `$parameter_name.original`,
      // - a parameter value from some context defined as
      //   `#context_name.parameter_name`.
      string value = 2;

      // *Optional* The default value to use when the `value` yields an empty
      // result.
      // Default values can be extracted from contexts by using the following
      // syntax: `#context_name.parameter_name`.
      string default_value = 3;

      // *Optional* The name of the entity type, prefixed with `@`, that
      // describes values of the parameter. If the parameter is
      // required, this must be provided.
      string entity_type_display_name = 4;

      // *Optional* Indicates whether the parameter is required. That is,
      // whether the intent cannot be completed without collecting the parameter
      // value.
      bool mandatory = 5;

      // *Optional* The collection of prompts that the agent can present to the
      // user in order to collect value for the parameter.
      repeated string prompts = 6;

      // *Optional* Indicates whether the parameter represents a list of
      // values.
      bool is_list = 7;
    }

    // Corresponds to the `Response` field in API.AI console.
    message Message {
      // The text response message.
      message Text {
        // *Optional* The collection of the agent's responses.
        repeated string text = 1;
      }

      // The image response message.
      message Image {
        // *Optional* The public URI to an image file.
        string image_uri = 1;
      }

      // The quick replies response message.
      message QuickReplies {
        // *Optional* The title of the collection of quick replies.
        string title = 1;

        // *Optional* The collection of quick replies.
        repeated string quick_replies = 2;
      }

      // The card response message.
      message Card {
        // *Optional* Contains information about a button.
        message Button {
          // *Optional* The text to show on the button.
          string text = 1;

          // *Optional* The text to send back to the Cloud Conversation Engine
          // API or a URI to open.
          string postback = 2;
        }

        // *Optional* The title of the card.
        string title = 1;

        // *Optional* The subtitle of the card.
        string subtitle = 2;

        // *Optional* The collection of card buttons.
        repeated Button buttons = 3;
      }

      // Represents different platforms that a rich message can be intended for.
      enum Platform {
        // Not specified.
        PLATFORM_DEFAULT = 0;

        // Facebook.
        PLATFORM_FACEBOOK = 1;

        // Slack.
        PLATFORM_SLACK = 2;

        // Telegram.
        PLATFORM_TELEGRAM = 3;

        // Kik.
        PLATFORM_KIK = 4;

        // Skype.
        PLATFORM_SKYPE = 5;
      }

      // *Required* The rich response message.
      oneof message {
        // The text response.
        Text text = 1;

        // The image response.
        Image image = 2;

        // The quick replies response.
        QuickReplies quick_replies = 3;

        // The card response.
        Card card = 4;

        // The response containing a custom payload.
        google.protobuf.Struct payload = 5;
      }

      // *Optional* The platform that this message is intended for.
      Platform platform = 6;
    }

    // *Optional* The name of the action associated with the intent.
    string action = 1;

    // *Optional* The collection of contexts that are activated when the intent
    // is matched. Context messages in this collection should not set the
    // parameters field.
    // Format: `projects/<Project ID>/agents/<Agent
    // ID>/sessions/*/contexts/<Context ID>`.
    repeated Context output_contexts = 2;

    // *Optional* Indicates whether to delete all contexts in the current
    // session when this intent is matched.
    bool reset_contexts = 3;

    // *Optional* The collection of parameters associated with the intent.
    repeated Parameter parameters = 4;

    // *Optional* The collection of rich messages corresponding to the
    // `Response` field in API.AI console.
    repeated Message messages = 5;

    // *Optional* The list of platforms for which the first response will be
    // taken from among the messages assigned to the DEFAULT_PLATFORM.
    repeated Message.Platform default_response_platforms = 6;
  }

  // Represents the different states that webhooks can be in.
  enum WebhookState {
    // Not specified. This value should be never used.
    WEBHOOK_STATE_UNSPECIFIED = 0;

    // Webhook is disabled in the agent and in the intent.
    WEBHOOK_STATE_DISABLED = 1;

    // Webhook is enabled in the agent and in the intent.
    WEBHOOK_STATE_ENABLED = 2;

    // Webhook is enabled in the agent and in the intent. Also, each slot
    // filling prompt is forwarded to the webhook.
    WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING = 3;
  }

  // *Required* The unique identifier of this intent.
  // Format: `projects/<Project ID>/agents/<Agent ID>/intents/<Intent ID>`.
  string name = 1;

  // *Required* The name of this intent.
  string display_name = 2;

  // *Optional* The priority of this intent. Higher numbers represent higher
  // priorities. Zero or negative numbers mean that the intent is disabled.
  int32 priority = 3;

  // *Optional* Indicates whether this is a fallback intent.
  bool is_fallback = 4;

  // *Optional* Indicates whether Machine Learning is enabled for the intent.
  bool ml_enabled = 5;

  // *Optional* Indicates whether webhooks are enabled for the intent.
  WebhookState webhook_state = 6;

  // *Optional* The list of contexts required for the intent to be triggered.
  repeated string input_contexts = 7;

  // *Optional* The collection of event names that trigger the intent.
  // If the collection of input contexts is not empty, all of the contexts must
  // be present in the active user session for an event to trigger this intent.
  repeated string events = 8;

  // *Optional* The collection of examples/templates that the agent is
  // trained on.
  repeated TrainingPhrase training_phrases = 9;

  // *Optional* The result of matching this intent.
  Result result = 10;
}

// The request to list all intents in the specified agent.
// Field `training_phrases` is not populated in returned intents.
message ListIntentsRequest {
  // *Required* The name of the agent to list intents from.
  // Format: `projects/<Project ID>/agents/<Agent ID>`.
  string parent = 1;
}

// The message returned from the ListIntents method.
message ListIntentsResponse {
  // The list of intents in the specified agent.
  repeated Intent intents = 1;
}

// The request to retrieve the specified intent.
message GetIntentRequest {
  // *Required* The name of the intent to retrieve.
  // Format: `projects/<Project ID>/agents/<Agent ID>/intents/<Intent ID>`.
  string name = 1;

  // *Optional* The resource view to apply to the returned intent.
  IntentView intent_view = 2;
}

// The request to create an intent in the specified agent.
message CreateIntentRequest {
  // *Required* The name of the agent to create the intent in.
  // Format: `projects/<Project ID>/agents/<Agent ID>`.
  string parent = 1;

  // *Required* The intent to create.
  Intent intent = 2;

  // *Optional* The resource view to apply to the returned intent.
  IntentView intent_view = 3;
}

// The request to update the specified intent.
message UpdateIntentRequest {
  // *Required* The intent to update.
  Intent intent = 1;

  // *Optional* The resource view to apply to the returned intent.
  IntentView intent_view = 2;
}

// The request to delete the specified intent.
message DeleteIntentRequest {
  // *Required* The name of the intent to delete.
  // Format: `projects/<Project ID>/agents/<Agent ID>/intents/<Intent ID>`.
  string name = 1;
}

// Represents the options for views of an intent.
// An intent can be a sizable object. Therefore, we provide a resource view that
// does not return training phrases in the response by default.
enum IntentView {
  // Training phrases field is not populated in the response. This is the
  // default value.
  INTENT_VIEW_BASIC = 0;

  // All fields are populated in the `responseText` selection.
  INTENT_VIEW_FULL = 1;
}
